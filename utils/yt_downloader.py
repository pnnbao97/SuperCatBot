import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path
import argparse
import re
from typing import Optional, Tuple, Dict, List
from urllib.parse import urlparse
from pytubefix import YouTube

class MultiPlatformExtractor:
    def __init__(self):
        self.temp_dir = None
        self.output_dir = Path("videos")
        self.output_dir.mkdir(exist_ok=True)
        
        # Danh s√°ch c√°c n·ªÅn t·∫£ng ƒë∆∞·ª£c h·ªó tr·ª£
        self.supported_platforms = {
            'youtube.com': 'YouTube',
            'youtu.be': 'YouTube',
            'facebook.com': 'Facebook',
            'fb.watch': 'Facebook',
            'reddit.com': 'Reddit',
            'twitter.com': 'X (Twitter)',
            'x.com': 'X (Twitter)',
            'tiktok.com': 'TikTok',
            'instagram.com': 'Instagram',
            'vimeo.com': 'Vimeo',
            'dailymotion.com': 'Dailymotion'
        }
    
    def detect_platform(self, url: str) -> Optional[str]:
        """X√°c ƒë·ªãnh n·ªÅn t·∫£ng t·ª´ URL"""
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc.lower()
            
            # Lo·∫°i b·ªè www. prefix
            if domain.startswith('www.'):
                domain = domain[4:]
            
            # Ki·ªÉm tra t·ª´ng n·ªÅn t·∫£ng
            for platform_domain, platform_name in self.supported_platforms.items():
                if platform_domain in domain:
                    return platform_name
            
            return None
        except Exception:
            return None
    
    def is_youtube_url(self, url: str) -> bool:
        """Ki·ªÉm tra xem URL c√≥ ph·∫£i YouTube kh√¥ng"""
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc.lower()
            if domain.startswith('www.'):
                domain = domain[4:]
            return domain in ['youtube.com', 'youtu.be']
        except Exception:
            return False
    
    def parse_time(self, time_str: str) -> int:
        """Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ format MM:SS ho·∫∑c HH:MM:SS th√†nh gi√¢y"""
        time_str = time_str.strip()
        
        # Format MM:SS
        if re.match(r'^\d{1,2}:\d{2}$', time_str):
            minutes, seconds = map(int, time_str.split(':'))
            return minutes * 60 + seconds
        
        # Format HH:MM:SS
        elif re.match(r'^\d{1,2}:\d{2}:\d{2}$', time_str):
            hours, minutes, seconds = map(int, time_str.split(':'))
            return hours * 3600 + minutes * 60 + seconds
        
        # Format ch·ªâ c√≥ gi√¢y
        elif re.match(r'^\d+$', time_str):
            return int(time_str)
        
        else:
            raise ValueError(f"Format th·ªùi gian kh√¥ng h·ª£p l·ªá: {time_str}")
    
    def download_youtube_with_pytubefix(self, url: str, audio_only: bool = False) -> Optional[str]:
        """T·∫£i YouTube video/audio b·∫±ng pytubefix"""
        try:
            print(f"üì• ƒêang t·∫£i t·ª´ YouTube b·∫±ng pytubefix: {url}")
            
            # T·∫°o th∆∞ m·ª•c t·∫°m
            self.temp_dir = tempfile.mkdtemp()
            
            # T·∫°o YouTube object
            yt = YouTube(url, use_oauth=False, allow_oauth_cache=False)
            
            print(f"üì∫ Ti√™u ƒë·ªÅ: {yt.title}")
            print(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {yt.length} gi√¢y")
            
            if audio_only:
                # T·∫£i audio
                print("üéµ ƒêang t·∫£i audio...")
                audio_stream = yt.streams.filter(only_audio=True).order_by('abr').desc().first()
                if not audio_stream:
                    print("‚ùå Kh√¥ng t√¨m th·∫•y stream audio")
                    return None
                    
                downloaded_file = audio_stream.download(output_path=self.temp_dir)
                
                # Chuy·ªÉn ƒë·ªïi sang MP3 n·∫øu c·∫ßn
                if not downloaded_file.endswith('.mp3'):
                    try:
                        print("fhasdofj")
                        # S·ª≠ d·ª•ng ffmpeg ƒë·ªÉ convert sang mp3
                        output_file = os.path.join(f"{yt.title}.wav")
                        output_file = re.sub(r'[<>:"/\\|?*]', '_', output_file)
                        
                        cmd = [
                            'ffmpeg', '-i', downloaded_file,
                            '-acodec', 'pcm_s16le',  # codec chu·∫©n c·ªßa wav
                            '-ar', '24000',          # (t√πy ch·ªçn) ƒë·∫∑t sample rate
                            '-ac', '1',              # (t√πy ch·ªçn) mono
                            '-y', output_file
                        ]
                        subprocess.run(cmd, capture_output=True, check=True)
                        
                        # X√≥a file g·ªëc v√† s·ª≠ d·ª•ng file mp3
                        os.remove(downloaded_file)
                        downloaded_file = output_file
                        
                    except (subprocess.CalledProcessError, FileNotFoundError):
                        print("‚ö†Ô∏è Kh√¥ng th·ªÉ convert sang MP3, gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng g·ªëc")
                
            else:
                # T·∫£i video
                print("üé¨ ƒêang t·∫£i video...")
                
                video_stream = yt.streams.get_highest_resolution()
                downloaded_file = video_stream.download(output_path=self.temp_dir)
            
            if downloaded_file and os.path.exists(downloaded_file):
                file_size = Path(downloaded_file).stat().st_size / (1024 * 1024)
                print(f"‚úÖ T·∫£i th√†nh c√¥ng: {os.path.basename(downloaded_file)}")
                print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                return downloaded_file
            else:
                print("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c file")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i t·ª´ YouTube: {e}")
            return None
    
    def download_with_ytdlp(self, url: str, audio_only: bool = False) -> Optional[str]:
        """T·∫£i video/audio t·ª´ c√°c n·ªÅn t·∫£ng kh√°c b·∫±ng yt-dlp"""
        try:
            # X√°c ƒë·ªãnh n·ªÅn t·∫£ng
            platform = self.detect_platform(url)
            if not platform:
                print(f"‚ùå Kh√¥ng h·ªó tr·ª£ n·ªÅn t·∫£ng n√†y: {url}")
                return None
            
            mode = "audio" if audio_only else "video"
            print(f"üì• ƒêang t·∫£i {mode} t·ª´ {platform} b·∫±ng yt-dlp: {url}")
            
            # T·∫°o th∆∞ m·ª•c t·∫°m
            self.temp_dir = tempfile.mkdtemp()
            
            # L·ªánh yt-dlp c∆° b·∫£n
            cmd = [
                'yt-dlp',
                '--output', os.path.join(self.temp_dir, '%(title)s.%(ext)s'),
                '--no-playlist'
            ]
            
            # Th√™m t√πy ch·ªçn audio ho·∫∑c video
            if audio_only:
                cmd.extend([
                    '--extract-audio',
                    '--audio-format', 'mp3',
                    '--audio-quality', '0'  # Ch·∫•t l∆∞·ª£ng cao nh·∫•t
                ])
            else:
                format_attempts: List[Tuple[List[str], str, str]] = [
                    # 1) L·∫•y best t·ª± nhi√™n (kh√¥ng √©p container)
                    ([
                        '--format', 'bestvideo[height<=720][ext=mp4][vcodec^=avc]+bestaudio/best[ext=mp4]',
                    ], '*', '∆∞u ti√™n mp4'),
                    # 2) Gh√©p bestvideo+bestaudio v√† ƒë·ªÉ yt-dlp t·ª± ch·ªçn container
                    ([
                        '--format', 'bestvideo*+bestaudio/best'
                    ], '*', 'bestvideo+bestaudio (gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng)'),
                ]
                format_attempts_to_use = format_attempts
            
            # Th√™m URL cu·ªëi c√πng
            if audio_only:
                cmd.append(url)
                print("‚è≥ ƒêang t·∫£i...")
                subprocess.run(cmd, capture_output=True, text=True, check=True, encoding='utf-8', errors='ignore')
                downloaded_files = list(Path(self.temp_dir).glob('*.mp3'))
                if not downloaded_files:
                    downloaded_files = [f for f in Path(self.temp_dir).iterdir()
                                        if f.is_file() and not f.name.endswith('.part')]
                if downloaded_files:
                    downloaded_file = str(downloaded_files[0])
                    file_size = Path(downloaded_file).stat().st_size / (1024 * 1024)
                    print(f"‚úÖ T·∫£i th√†nh c√¥ng: {os.path.basename(downloaded_file)}")
                    print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                    return downloaded_file
                print("‚ùå Kh√¥ng t√¨m th·∫•y file ƒë√£ t·∫£i")
                return None

            for fmt_args, pattern, label in format_attempts_to_use:
                attempt_cmd = cmd + fmt_args + [url]
                print(f"‚è≥ ƒêang t·∫£i (chi·∫øn l∆∞·ª£c: {label})...")
                try:
                    subprocess.run(
                        attempt_cmd,
                        capture_output=True,
                        text=True,
                        check=True,
                        encoding='utf-8',
                        errors='ignore'
                    )
                    # T√¨m file ƒë√£ t·∫£i theo pattern
                    downloaded_files = list(Path(self.temp_dir).glob(pattern)) if pattern != '*' else \
                        [f for f in Path(self.temp_dir).iterdir() if f.is_file() and not f.name.endswith('.part')]
                    if downloaded_files:
                        downloaded_file = str(downloaded_files[0])
                        file_size = Path(downloaded_file).stat().st_size / (1024 * 1024)
                        print(f"‚úÖ T·∫£i th√†nh c√¥ng: {os.path.basename(downloaded_file)}")
                        print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                        return downloaded_file
                except subprocess.CalledProcessError as e:
                    print(f"‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi chi·∫øn l∆∞·ª£c '{label}'. Th·ª≠ ph∆∞∆°ng √°n kh√°c...")
                    continue

            # N·∫øu t·∫•t c·∫£ chi·∫øn l∆∞·ª£c ƒë·ªÅu th·∫•t b·∫°i
            print("‚ùå Kh√¥ng th·ªÉ t·∫£i v·ªõi c√°c ƒë·ªãnh d·∫°ng chu·∫©n.")
            return None
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi t·∫£i: {e}")
            if e.stderr:
                print(f"Chi ti·∫øt l·ªói: {e.stderr}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            return None
    
    def download_video(self, url: str, audio_only: bool = False) -> Optional[str]:
        """T·∫£i video MP4 ho·∫∑c audio MP3 t·ª´ nhi·ªÅu n·ªÅn t·∫£ng"""
        # Ki·ªÉm tra n·∫øu l√† YouTube th√¨ d√πng pytubefix, c√≤n l·∫°i d√πng yt-dlp
        if self.is_youtube_url(url):
            return self.download_youtube_with_pytubefix(url, audio_only)
        else:
            return self.download_with_ytdlp(url, audio_only)
    
    def extract_segment(self, input_file: str, start_time: int, 
                       end_time: int, output_filename: str, is_audio: bool = False) -> bool:
        """T√°ch ƒëo·∫°n video ho·∫∑c audio t·ª´ file g·ªëc"""
        try:
            # Ki·ªÉm tra ffmpeg
            try:
                subprocess.run(['ffmpeg', '-version'], 
                             capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                print("‚ùå ffmpeg kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Kh√¥ng th·ªÉ t√°ch ƒëo·∫°n.")
                print("Vui l√≤ng c√†i ƒë·∫∑t ffmpeg: https://ffmpeg.org/download.html")
                return False
            
            duration = end_time - start_time
            
            # ƒê∆∞·ªùng d·∫´n file output
            extension = '.mp3' if is_audio else '.mp4'
            output_path = self.output_dir / f"{output_filename}{extension}"
            
            content_type = "audio" if is_audio else "video"
            print(f"‚úÇÔ∏è ƒêang t√°ch {content_type} t·ª´ {start_time}s ƒë·∫øn {end_time}s...")
            
            # L·ªánh ffmpeg ƒë·ªÉ t√°ch
            cmd = [
                'ffmpeg',
                '-i', input_file,
                '-ss', str(start_time),
                '-t', str(duration),
                '-c', 'copy',  # Copy kh√¥ng re-encode ƒë·ªÉ gi·ªØ ch·∫•t l∆∞·ª£ng
                '-y',  # Overwrite file n·∫øu t·ªìn t·∫°i
                str(output_path)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True, encoding='utf-8', errors='ignore')
            
            if output_path.exists():
                file_size = output_path.stat().st_size / (1024 * 1024)  # MB
                print(f"‚úÖ T√°ch th√†nh c√¥ng: {output_path}")
                print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size:.2f} MB")
                print(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {duration} gi√¢y")
                return True
            else:
                print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c file output")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi t√°ch {content_type}: {e}")
            if e.stderr:
                print(f"Chi ti·∫øt l·ªói: {e.stderr}")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            return False
    
    def move_to_output(self, source_file: str, output_filename: Optional[str] = None) -> bool:
        """Di chuy·ªÉn file t·ª´ temp sang th∆∞ m·ª•c output"""
        try:
            source_path = Path(source_file)
            
            if output_filename:
                # Gi·ªØ nguy√™n extension g·ªëc
                extension = source_path.suffix
                output_path = self.output_dir / f"{output_filename}{extension}"
            else:
                output_path = self.output_dir / source_path.name
            
            # Copy file sang th∆∞ m·ª•c output
            shutil.copy2(source_file, output_path)
            
            if output_path.exists():
                file_size = output_path.stat().st_size / (1024 * 1024)  # MB
                print(f"üìÅ File ƒë√£ l∆∞u: {output_path}")
                print(f"üìè K√≠ch th∆∞·ªõc: {file_size:.2f} MB")
                return True
            else:
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")
            return False
    
    def cleanup(self):
        """D·ªçn d·∫πp file t·∫°m"""
        if self.temp_dir and os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
            print("üßπ ƒê√£ d·ªçn d·∫πp file t·∫°m")
    
    def process(self, url: str, audio_only: bool = False, start_time: Optional[str] = None, 
               end_time: Optional[str] = None, output_filename: Optional[str] = None) -> bool:
        """X·ª≠ l√Ω to√†n b·ªô quy tr√¨nh"""
        try:
            # Ki·ªÉm tra logic th·ªùi gian
            has_time_params = start_time is not None and end_time is not None
            
            if has_time_params:
                try:
                    start_seconds = self.parse_time(start_time)
                    end_seconds = self.parse_time(end_time)
                except ValueError as e:
                    print(f"‚ùå {e}")
                    return False
                
                if start_seconds >= end_seconds:
                    print("‚ùå Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c")
                    return False
                
                # Th√¥ng b√°o ch·∫ø ƒë·ªô t√°ch ƒëo·∫°n
                content_type = "audio" if audio_only else "video"
                print(f"‚úÇÔ∏è Ch·∫ø ƒë·ªô t√°ch ƒëo·∫°n {content_type} ƒë∆∞·ª£c k√≠ch ho·∫°t")
            
            # T·∫£i video/audio
            downloaded_file = self.download_video(url, audio_only)
            if not downloaded_file:
                return False
            
            # X·ª≠ l√Ω theo ch·∫ø ƒë·ªô
            if has_time_params:
                # T√°ch ƒëo·∫°n video/audio
                if not output_filename:
                    video_title = os.path.splitext(os.path.basename(downloaded_file))[0]
                    content_type = "audio" if audio_only else "video"
                    output_filename = f"{video_title}_{content_type}_segment_{start_time}_{end_time}"
                    # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá trong t√™n file
                    output_filename = re.sub(r'[<>:"/\\|?*]', '_', output_filename)
                
                success = self.extract_segment(
                    downloaded_file, start_seconds, end_seconds, output_filename, audio_only
                )
            else:
                # L∆∞u to√†n b·ªô file
                success = self.move_to_output(downloaded_file, output_filename)
            
            return success
            
        finally:
            self.cleanup()

def main():
    parser = argparse.ArgumentParser(
        description="T·∫£i video/audio t·ª´ nhi·ªÅu n·ªÅn t·∫£ng v·ªõi kh·∫£ nƒÉng t√°ch ƒëo·∫°n audio",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:

T·∫£i to√†n b·ªô video MP4 (m·∫∑c ƒë·ªãnh):
  python script.py "https://youtube.com/watch?v=VIDEO_ID"
  
T·∫£i to√†n b·ªô audio MP3:
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -a
  
T√°ch ƒëo·∫°n video MP4:
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -s "1:30" -e "2:45"
  
T√°ch ƒëo·∫°n audio MP3:
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -a -s "1:30" -e "2:45"
  
V·ªõi t√™n file t√πy ch·ªânh:
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -o "my_video"
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -a -o "my_audio"
  python script.py "https://youtube.com/watch?v=VIDEO_ID" -s "90" -e "165" -o "my_segment"

Format th·ªùi gian:
  - MM:SS (v√≠ d·ª•: 1:30, 2:45)  
  - HH:MM:SS (v√≠ d·ª•: 1:30:45)
  - Ch·ªâ s·ªë gi√¢y (v√≠ d·ª•: 90, 165)

C√°c n·ªÅn t·∫£ng ƒë∆∞·ª£c h·ªó tr·ª£:
  YouTube (pytubefix), Facebook, Reddit, X(Twitter), TikTok, Instagram, Vimeo, Dailymotion (yt-dlp)
        """
    )
    
    parser.add_argument('url', help='URL video t·ª´ b·∫•t k·ª≥ n·ªÅn t·∫£ng n√†o ƒë∆∞·ª£c h·ªó tr·ª£')
    parser.add_argument('-a', '--audio-only', action='store_true', 
                       help='Ch·ªâ t·∫£i audio (m·∫∑c ƒë·ªãnh l√† t·∫£i video)')
    parser.add_argument('-s', '--start', help='Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ t√°ch audio (MM:SS, HH:MM:SS, ho·∫∑c s·ªë gi√¢y)')
    parser.add_argument('-e', '--end', help='Th·ªùi gian k·∫øt th√∫c ƒë·ªÉ t√°ch audio (MM:SS, HH:MM:SS, ho·∫∑c s·ªë gi√¢y)')
    parser.add_argument('-o', '--output', help='T√™n file output (kh√¥ng c·∫ßn extension)')
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra tham s·ªë th·ªùi gian
    if (args.start and not args.end) or (args.end and not args.start):
        print("‚ùå C·∫ßn cung c·∫•p c·∫£ th·ªùi gian b·∫Øt ƒë·∫ßu (-s) v√† k·∫øt th√∫c (-e)")
        sys.exit(1)
    
    # T·∫°o extractor v√† x·ª≠ l√Ω
    extractor = MultiPlatformExtractor()
    success = extractor.process(
        args.url, 
        args.audio_only, 
        args.start, 
        args.end, 
        args.output
    )
    
    if success:
        print(f"\nüéâ Ho√†n th√†nh! File ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c '{extractor.output_dir}'")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω")
        sys.exit(1)

if __name__ == "__main__":
    main()