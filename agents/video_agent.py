from langchain_core.messages import HumanMessage, AIMessage, SystemMessage, ToolMessage
from agents.memory import State
from agents.models import main_llm
from tools.video_tools import video_tools

import logging

logger = logging.getLogger(__name__)

# ‚úÖ Bind tools v√†o LLM
video_llm = main_llm.bind_tools(video_tools)


async def video_agent_node(state: State):
    """Agent x·ª≠ l√Ω video - t·∫£i, t√°ch ƒëo·∫°n, l·∫•y th√¥ng tin"""
    
    user_messages = [m for m in state["messages"] if isinstance(m, HumanMessage)]
    instructions = state.get("agent_instructions", "")
    
    if not user_messages:
        return {"messages": [AIMessage(content="‚ùå Kh√¥ng c√≥ c√¢u h·ªèi v·ªÅ video")]}
    
    user_query = user_messages[-1].content
    recent_messages = state["messages"][-5:]  # L·∫•y 5 messages g·∫ßn nh·∫•t
    
    logger.info(f"üé¨ [VIDEO AGENT] Query: '{user_query}'")
    logger.info(f"üìã Instructions: '{instructions}'")
    
    # System prompt cho video agent
    system_prompt = SystemMessage(
        content=(
            f"M√†y l√† SuperCat, con m√®o cam th√¥ng th√°i, chuy√™n x·ª≠ l√Ω video.\n\n"
            f"Nhi·ªám v·ª•: {instructions}\n\n"
            f"C√°c c√¥ng c·ª• c√≥ s·∫µn:\n"
            f"1. download_video: T·∫£i video/audio t·ª´ YouTube, Facebook, TikTok, Instagram, Reddit, X, Vimeo, Dailymotion\n"
            f"2. get_video_info: L·∫•y th√¥ng tin v·ªÅ video\n\n"
            f"H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n"
            f"- N·∫øu user mu·ªën t·∫£i video ‚Üí d√πng download_video v·ªõi audio_only=False\n"
            f"- N·∫øu user mu·ªën t·∫£i audio ‚Üí d√πng download_video v·ªõi audio_only=True\n"
            f"- N·∫øu user mu·ªën t√°ch ƒëo·∫°n ‚Üí th√™m start_time v√† end_time\n"
            f"- N·∫øu user h·ªèi th√¥ng tin video ‚Üí d√πng get_video_info\n\n"
            f"Format th·ªùi gian: MM:SS (vd: 1:30), HH:MM:SS (vd: 1:30:45), ho·∫∑c s·ªë gi√¢y (vd: 90)\n\n"
            f"H√£y ph√¢n t√≠ch y√™u c·∫ßu v√† g·ªçi tool ph√π h·ª£p!"
        )
    )
    
    # G·ªçi LLM v·ªõi tools
    response = await video_llm.ainvoke([system_prompt] + recent_messages)
    
    # Ki·ªÉm tra xem c√≥ tool calls kh√¥ng
    if not response.tool_calls:
        # Kh√¥ng c√≥ tool call ‚Üí tr·∫£ l·ªùi th√¥ng th∆∞·ªùng
        logger.info("üí¨ No tool calls, returning direct response")
        return {"messages": [response]}
    
    # C√≥ tool calls ‚Üí x·ª≠ l√Ω t·ª´ng tool
    logger.info(f"üîß Tool calls: {len(response.tool_calls)}")
    
    messages_to_add = [response]  # Th√™m AI message v·ªõi tool calls
    
    # Execute tools
    for tool_call in response.tool_calls:
        tool_name = tool_call["name"]
        tool_args = tool_call["args"]
        tool_id = tool_call["id"]
        
        logger.info(f"‚öôÔ∏è Executing tool: {tool_name} with args: {tool_args}")
        
        # T√¨m tool function
        tool_func = None
        for tool in video_tools:
            if tool.name == tool_name:
                tool_func = tool
                break
        
        if not tool_func:
            result = f"‚ùå Tool '{tool_name}' kh√¥ng t·ªìn t·∫°i"
        else:
            try:
                # G·ªçi tool
                result = await tool_func.ainvoke(tool_args)
                logger.info(f"‚úÖ Tool result: {result[:100]}...")
            except Exception as e:
                result = f"‚ùå L·ªói khi th·ª±c thi tool: {str(e)}"
                logger.error(f"‚ùå Tool execution error: {e}")
        
        # Th√™m tool message
        messages_to_add.append(
            ToolMessage(
                content=str(result),
                tool_call_id=tool_id
            )
        )
    
    # G·ªçi LLM l·∫ßn n·ªØa ƒë·ªÉ t·ªïng h·ª£p k·∫øt qu·∫£
    final_response = await video_llm.ainvoke([system_prompt] + recent_messages + messages_to_add)
    messages_to_add.append(final_response)
    
    logger.info(f"‚úÖ [VIDEO AGENT] Completed with {len(messages_to_add)} messages")
    
    return {"messages": messages_to_add}