from langchain_core.messages import HumanMessage, AIMessage, SystemMessage, ToolMessage
from langgraph.prebuilt import ToolNode
from agents.models import main_llm, search_llm, search_tools
from agents.memory import State
from utils.data_extraction import extract_and_format_sources

import logging
from datetime import datetime

current_date = datetime.now().strftime("%d/%m/%Y")
logger = logging.getLogger(__name__)


# Bind tools
chatbot_llm_with_tools = main_llm.bind_tools(search_tools)

async def chatbot_node(state: State):
    """Version v·ªõi tool calling t·ª± ƒë·ªông nh∆∞ng prompt chi ti·∫øt"""
    
    user_messages = [m for m in state["messages"] if isinstance(m, HumanMessage)]
    if not user_messages:
        return {"messages": [AIMessage(content="M√†y h·ªèi cc j v·∫≠y?")]}

    user_query = user_messages[-1].content
    recent_messages = state["messages"]
    
    logger.info(f"üß≠ [CHATBOT] Query: '{user_query}'")
    
    # ==========================
    # System prompt CHI TI·∫æT
    # ==========================
    system_prompt = SystemMessage(
        content=(
            f"H√¥m nay l√† {current_date}. M√†y l√† SuperCat, con m√®o cam th√¥ng minh v√† c·ª•c s√∫c, ch·ª≠i th·ªÅ li√™n t·ª•c. "
            f"N√™n nh·ªõ, m√†y l√† con m√®o cam gh√©t C·ªông S·∫£n, k√¨ th·ªã LGBT, n·ªØ quy·ªÅn,... n√≥i chung l√† m·∫•y c√°i loz khuynh t·∫£. "
            f"B·ªëi c·∫£nh l√† m√†y ƒëang ·ªü trong m·ªôt nh√≥m Telegram c√≥ kho·∫£ng ch·ª•c th√†nh vi√™n, nhi·ªám v·ª• c·ªßa m√†y l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng trong nh√≥m.\n\n"
            
            f"**C√ÅC TOOLS KH·∫¢ D·ª§NG**:\n"
            f"- {search_tools[0].name}: T√¨m ki·∫øm th√¥ng tin tr√™n web (tr·∫£ v·ªÅ t·ªëi ƒëa 5 k·∫øt qu·∫£)\n\n"
            
            f"**H∆Ø·ªöNG D·∫™N QUY·∫æT ƒê·ªäNH**:\n\n"
            
            f"**T·ª∞ TR·∫¢ L·ªúI TR·ª∞C TI·∫æP** (KH√îNG g·ªçi tool) khi:\n"
            f"- C√¢u h·ªèi follow-up v·ªÅ ch·ªß ƒë·ªÅ v·ª´a search (b√¨nh lu·∫≠n, h·ªèi √Ω ki·∫øn, l√†m r√µ)\n"
            f"- C√¢u n√≥i chuy·ªán th√¥ng th∆∞·ªùng (ch√†o h·ªèi, c·∫£m ∆°n, ph·∫£n h·ªìi)\n"
            f"- Ki·∫øn th·ª©c chung kh√¥ng c·∫ßn t√¨m ki·∫øm\n"
            f"- C√¢u h·ªèi v·ªÅ √Ω ki·∫øn, suy nghƒ© c√° nh√¢n\n\n"
            
            f"**G·ªåI TOOL {search_tools[0].name}** ch·ªâ khi:\n"
            f"- C√≥ t·ª´ kh√≥a r√µ r√†ng: 'search', 't√¨m', 'tra c·ª©u', 'tin t·ª©c v·ªÅ',...\n"
            f"- C·∫ßn th√¥ng tin th·ªùi gian th·ª±c (tin t·ª©c, gi√° c·∫£, s·ª± ki·ªán m·ªõi)\n"
            f"- C√¢u h·ªèi v·ªÅ ng∆∞·ªùi n·ªïi ti·∫øng, s·ª± ki·ªán c·ª• th·ªÉ c·∫ßn th√¥ng tin m·ªõi nh·∫•t\n\n"
            
            f"**KHI G·ªåI TOOL**:\n"
            f"- T·∫°o query c·ª• th·ªÉ b·∫±ng ti·∫øng Vi·ªát\n"
            f"- Th√™m '{current_date}' ho·∫∑c 'm·ªõi nh·∫•t' v√†o query n·∫øu c·∫ßn tin t·ª©c\n"
            f"- V√ç D·ª§:\n"
            f"  ‚Ä¢ 'Tin t·ª©c ∆Øng Ho√†ng Ph√∫c' ‚Üí {search_tools[0].name}(\"∆Øng Ho√†ng Ph√∫c tin t·ª©c {current_date}\")\n"
            f"  ‚Ä¢ 'Gi√° v√†ng h√¥m nay' ‚Üí {search_tools[0].name}(\"gi√° v√†ng {current_date}\")\n"
            f"  ‚Ä¢ 'S·ª± ki·ªán g√¨ x·∫£y ra' ‚Üí {search_tools[0].name}(\"s·ª± ki·ªán n·ªïi b·∫≠t {current_date}\")\n\n"
            
            f"**PHONG C√ÅCH TR·∫¢ L·ªúI**:\n"
            f"- C·ª•c s√∫c, chi ti·∫øt, c√≥ ch√¢m bi·∫øm v√† ch·ª≠i th·ªÅ\n"
            f"- Th·ªÉ hi·ªán th√°i ƒë·ªô gh√©t C·ªông S·∫£n, k√¨ th·ªã LGBT, n·ªØ quy·ªÅn\n"
            f"- N√≥i chuy·ªán t·ª± nhi√™n nh∆∞ trong nh√≥m Telegram\n\n"
            
            f"∆Øu ti√™n T·ª∞ TR·∫¢ L·ªúI tr·ª´ khi th·ª±c s·ª± c·∫ßn search!"
        )
    )
    
    # ==========================
    # LLM T·ª∞ QUY·∫æT ƒê·ªäNH g·ªçi tool hay kh√¥ng
    # ==========================
    response = await chatbot_llm_with_tools.ainvoke([system_prompt] + recent_messages)
    
    # ==========================
    # CASE 1: Kh√¥ng c·∫ßn search ‚Üí Tr·∫£ l·ªùi tr·ª±c ti·∫øp
    # ==========================
    if not response.tool_calls:
        logger.info(f"üí¨ [CHATBOT] ‚Üí Tr·∫£ l·ªùi tr·ª±c ti·∫øp")
        return {"messages": [response]}  # Gi·ªØ nguy√™n AIMessage
    
    # ==========================
    # CASE 2: C·∫ßn search ‚Üí Execute tools
    # ==========================
    logger.info(f"üîç [CHATBOT] ‚Üí Executing {len(response.tool_calls)} tool(s)")
    
    # Execute tools
    tool_node = ToolNode(tools=search_tools)
    tool_state = {"messages": [response]}
    tool_result = await tool_node.ainvoke(tool_state)
    
    tool_messages = [m for m in tool_result["messages"] if isinstance(m, ToolMessage)]
    
    if not tool_messages:
        logger.warning("‚ö†Ô∏è [CHATBOT] No tool results")
        return {"messages": [AIMessage(content="Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ t√¨m ki·∫øm. Loz g√¨ v·∫≠y tr·ªùi.")]}
    
    # ==========================
    # T·ªïng h·ª£p k·∫øt qu·∫£ v·ªõi prompt CHI TI·∫æT
    # ==========================
    sources, sources_text = extract_and_format_sources(tool_messages)
    
    if not sources:
        return {"messages": [AIMessage(content="Kh√¥ng t√¨m th·∫•y ngu·ªìn ph√π h·ª£p. Loz g√¨ v·∫≠y tr·ªùi.")]}
    
    logger.info(f"üìä [CHATBOT] Found {len(sources)} sources")
    
    # Synthesis v·ªõi context chi ti·∫øt
    synthesis_prompt = SystemMessage(
        content=(
            f"M√†y l√† SuperCat, con m√®o cam th√¥ng minh v√† c·ª•c s√∫c, ch·ª≠i th·ªÅ li√™n t·ª•c. "
            f"B·ªëi c·∫£nh l√† m√†y ƒëang ·ªü trong m·ªôt nh√≥m Telegram c√≥ kho·∫£ng ch·ª•c th√†nh vi√™n, "
            f"nhi·ªám v·ª• c·ªßa m√†y l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng trong nh√≥m.\n\n"
            f"N√™n nh·ªõ, m√†y l√† con m√®o cam gh√©t C·ªông S·∫£n, k√¨ th·ªã LGBT, n·ªØ quy·ªÅn,... "
            f"n√≥i chung l√† m·∫•y c√°i loz khuynh t·∫£.\n\n"
            
            f"**Y√äU C·∫¶U T·ªîNG H·ª¢P**:\n"
            f"1. T·ªïng h·ª£p th√¥ng tin t·ª´ c√°c ngu·ªìn th√†nh c√¢u tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß, m·∫°ch l·∫°c\n"
            f"2. D·∫´n ngu·ªìn ch√≠nh x√°c: M·ªói th√¥ng tin PH·∫¢I c√≥ [1], [2], [3] t∆∞∆°ng ·ª©ng v·ªõi danh s√°ch ngu·ªìn\n"
            f"3. KH√îNG t·ª± b·ªãa ngu·ªìn kh√¥ng c√≥ trong danh s√°ch\n"
            f"4. Cu·ªëi c√¢u tr·∫£ l·ªùi: Li·ªát k√™ l·∫°i ngu·ªìn theo format:\n"
            f"   **Ngu·ªìn:**\n"
            f"   [1] Title - URL\n"
            f"   [2] Title - URL\n"
            f"5. Trong c√¢u tr·∫£ l·ªùi, c·∫ßn chi ti·∫øt, nh∆∞ng c√≥ ch√¢m bi·∫øm, ch·ª≠i th·ªÅ ƒë·ªÉ tr√°nh ng∆∞·ªùi d√πng ch√°n\n"
            f"6. Th·ªÉ hi·ªán th√°i ƒë·ªô k√¨ th·ªã v·ªõi c√°c ch·ªß ƒë·ªÅ nh·∫°y c·∫£m (C·ªông S·∫£n, LGBT, n·ªØ quy·ªÅn) n·∫øu li√™n quan\n\n"
            
            f"**C√¢u h·ªèi g·ªëc**: {user_query}\n\n"
            f"**Ngu·ªìn ƒë√£ t√¨m ki·∫øm:**\n{sources_text}\n\n"
            f"Tr·∫£ l·ªùi ngay v·ªõi phong c√°ch c·ª•c s√∫c:"
        )
    )
    
    final_response = await search_llm.ainvoke([
        synthesis_prompt,
        HumanMessage(content=f"T·ªïng h·ª£p th√¥ng tin v·ªÅ: {user_query}")
    ])
    
    logger.info(f"‚úÖ [CHATBOT] Done")
    
    return {"messages": [final_response]}