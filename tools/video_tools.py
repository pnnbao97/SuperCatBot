from langchain_core.tools import tool
from typing import Optional
import logging
from utils.yt_downloader import MultiPlatformExtractor

logger = logging.getLogger(__name__)

@tool
async def download_video(
    url: str,
    audio_only: bool = False,
    start_time: Optional[str] = None,
    end_time: Optional[str] = None,
    output_filename: Optional[str] = None
) -> str:
    """
    T·∫£i video ho·∫∑c audio t·ª´ c√°c n·ªÅn t·∫£ng (YouTube, Facebook, TikTok, etc.)
    
    Args:
        url: URL c·ªßa video (YouTube, Facebook, TikTok, Instagram, Reddit, X, Vimeo, Dailymotion)
        audio_only: True n·∫øu ch·ªâ t·∫£i audio (MP3), False n·∫øu t·∫£i video (MP4)
        start_time: Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ t√°ch ƒëo·∫°n (format: MM:SS ho·∫∑c HH:MM:SS ho·∫∑c s·ªë gi√¢y)
        end_time: Th·ªùi gian k·∫øt th√∫c ƒë·ªÉ t√°ch ƒëo·∫°n (format: MM:SS ho·∫∑c HH:MM:SS ho·∫∑c s·ªë gi√¢y)
        output_filename: T√™n file output t√πy ch·ªânh (kh√¥ng c·∫ßn extension)
    
    Returns:
        Th√¥ng b√°o k·∫øt qu·∫£ download v√† ƒë∆∞·ªùng d·∫´n file
    
    Examples:
        - T·∫£i to√†n b·ªô video: download_video("https://youtube.com/watch?v=xxx")
        - T·∫£i audio: download_video("https://youtube.com/watch?v=xxx", audio_only=True)
        - T√°ch ƒëo·∫°n video: download_video("https://youtube.com/watch?v=xxx", start_time="1:30", end_time="2:45")
        - T√°ch ƒëo·∫°n audio: download_video("https://youtube.com/watch?v=xxx", audio_only=True, start_time="90", end_time="165")
    """
    try:
        # Kh·ªüi t·∫°o extractor
        extractor = MultiPlatformExtractor()
        
        # X√°c ƒë·ªãnh n·ªÅn t·∫£ng
        platform = extractor.detect_platform(url)
        if not platform:
            return f"‚ùå URL kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {url}"
        
        logger.info(f"üì• ƒêang t·∫£i t·ª´ {platform}: {url}")
        
        # X·ª≠ l√Ω download
        success = extractor.process(
            url=url,
            audio_only=audio_only,
            start_time=start_time,
            end_time=end_time,
            output_filename=output_filename
        )
        
        if success:
            content_type = "audio MP3" if audio_only else "video MP4"
            mode = "T√°ch ƒëo·∫°n" if start_time and end_time else "T·∫£i to√†n b·ªô"
            
            result = f"‚úÖ {mode} {content_type} th√†nh c√¥ng!\n"
            result += f"üìÅ File ƒë√£ l∆∞u trong th∆∞ m·ª•c: {extractor.output_dir}\n"
            
            if start_time and end_time:
                result += f"‚è±Ô∏è T·ª´ {start_time} ƒë·∫øn {end_time}"
            
            return result
        else:
            return f"‚ùå Kh√¥ng th·ªÉ t·∫£i {content_type} t·ª´ {url}"
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói download_video: {e}")
        return f"‚ùå L·ªói: {str(e)}"


@tool
async def get_video_info(url: str) -> str:
    """
    L·∫•y th√¥ng tin v·ªÅ video (ti√™u ƒë·ªÅ, th·ªùi l∆∞·ª£ng, n·ªÅn t·∫£ng)
    
    Args:
        url: URL c·ªßa video
    
    Returns:
        Th√¥ng tin chi ti·∫øt v·ªÅ video
    """
    try:
        extractor = MultiPlatformExtractor()
        
        # X√°c ƒë·ªãnh n·ªÅn t·∫£ng
        platform = extractor.detect_platform(url)
        if not platform:
            return f"‚ùå URL kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {url}"
        
        # N·∫øu l√† YouTube, l·∫•y th√¥ng tin chi ti·∫øt
        if extractor.is_youtube_url(url):
            from pytubefix import YouTube
            yt = YouTube(url, use_oauth=False, allow_oauth_cache=False)
            
            info = f"üì∫ **Th√¥ng tin video**\n"
            info += f"- N·ªÅn t·∫£ng: YouTube\n"
            info += f"- Ti√™u ƒë·ªÅ: {yt.title}\n"
            info += f"- Th·ªùi l∆∞·ª£ng: {yt.length} gi√¢y ({yt.length // 60}:{yt.length % 60:02d})\n"
            info += f"- T√°c gi·∫£: {yt.author}\n"
            info += f"- L∆∞·ª£t xem: {yt.views:,}\n"
            
            return info
        else:
            return f"üì∫ Video t·ª´ n·ªÅn t·∫£ng: {platform}\nURL: {url}"
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói get_video_info: {e}")
        return f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video: {str(e)}"


# Danh s√°ch tools ƒë·ªÉ bind v√†o LLM
video_tools = [download_video, get_video_info]